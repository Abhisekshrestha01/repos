@model BOL.ViewModel.VotingViewModel
@{
    ViewBag.Title = "CastVoteIndex";
}

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pb-2 mb-3 border-bottom">
    <h1 class="h2">Cast Vote</h1>
    <br />
    <div class="btn-toolbar mb-2 mb-md-0">
        <div class="btn-group mr-2">
            <button class="btn btn-sm btn-outline-secondary">Share</button>
            <button class="btn btn-sm btn-outline-secondary">Export</button>
        </div>
        <button class="btn btn-sm btn-outline-secondary dropdown-toggle">
            <span data-feather="calendar"></span>
            This week
        </button>
    </div>
</div>

@using (Html.BeginForm("CastVoteIndexPost", "Election", FormMethod.Post))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">

    @{
        if (TempData["Msg"] != null)
        {
            <h4>@TempData["Msg"].ToString()</h4>
        }
    }

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="form-group">
        <label class="control-label col-md-2">Select Election</label>
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.castVoteViewModel.electionId, Model.electionList.Select(x => new SelectListItem { Text = x.Name, Value = x.Id.ToString() }), "Select Election", new { @class = "form-control", @onchange = "electionDropDownChange();" })

            @Html.ValidationMessageFor(model => model.castVoteViewModel.electionId, "", new { @class = "text-danger" })
        </div>
    </div>



    <div class="form-group">
        @Html.LabelFor(model => model.castVoteViewModel.ElectionName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.castVoteViewModel.ElectionName, new { htmlAttributes = new { @class = "form-control", @disabled = "true" } })
            @Html.ValidationMessageFor(model => model.castVoteViewModel.ElectionName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.Label("Remaining Time", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.Editor("castVoteViewModel_endDate", new { htmlAttributes = new { @class = "form-control", @disabled = "true" } })
            @Html.ValidationMessageFor(model => model.castVoteViewModel.endDate, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.castVoteViewModel.ElectionDescription, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @*@Html.TextAreaFor(model => model.ElectionDescription, new { htmlAttributes = new { @class = "form-control", @disabled = "true" } })*@
            @Html.TextAreaFor(model => model.castVoteViewModel.ElectionDescription, new { @class = "form-control", @disabled = "true" })
            @Html.ValidationMessageFor(model => model.castVoteViewModel.ElectionDescription, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <label class="control-label col-md-2">Select the candidate</label>
        <div class="col-md-10">

            @Html.DropDownListFor(model => model.castVoteViewModel.candidateId, Model.candidateList.Select(x => new SelectListItem
            {

                Text = x.Name,
                Value = x.Id.ToString()
            }), "Select Candidate", new { @class = "form-control", @onChange = "candidateDropDownChange();" })
            @Html.ValidationMessageFor(model => model.castVoteViewModel.candidateId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Vote" class="btn btn-outline-secondary" onclick="return validate();"/>
        </div>
    </div>
</div>
 }

<script type="text/javascript">
    function electionDropDownChange() {
        
        var electionId = $("#castVoteViewModel_electionId").val();

        $.ajax({
            type: "GET",
            url: '/ElectionCandidate/GetAllCandidatesForElection/',
            dataType: "json",
            data: { electionId: electionId },
            contentType: 'application/json; charset=utf-8',
            success: function (result) {
                console.log(result);
                $("#castVoteViewModel_candidateId").find('option').not(':first').remove();
                $("#castVoteViewModel_ElectionName").val(result[0].ElectionName);
                $("#castVoteViewModel_ElectionDescription").val(result[0].ElectionDescription);
               // $("#castVoteViewModel_endDate").val(result[0].EndDate);
                var parsed = result[0].EndDate.split('(')[1].split(')')[0];
                var endTime = new Date(parseInt(parsed));
                console.log("end date " + endTime);
                StartCountDown(endTime);
                for (i = 0; i < result.length; i++) {
                    $("<option />", { value: result[i].Id, text: result[i].Name }).appendTo($("#castVoteViewModel_candidateId"));
                   // $("#castVoteViewModel_electionId").append("<option value='" + result[i].Id + "'>" + result[i].Name + "</option");
                    
                }
            },
            error: function (result) {
                console.log(result);
                console.log("An error occured");
            }
        });
    }



    var timerFunction;
    var distance;
    function StartCountDown(endDate) {


        // Set the date we're counting down to
        //var countDownDate = endDate.getTime();
        //console.log("DateTime :" + countDownDate);
        //var flag = true;
        // Update the count down every 1 second 

        if (timerFunction != "undefined") {
            clearInterval(timerFunction);

        }
        console.log("Timer function " + timerFunction);
        // Update the count down every 1 second
        timerFunction = setInterval(function () {
            var countDownDate = endDate.getTime();
            // Get todays date and time
            var now = new Date().getTime();

            // Find the distance between now an the count down date
            distance = countDownDate - now;

            // Time calculations for days, hours, minutes and seconds
            var days = Math.floor(distance / (1000 * 60 * 60 * 24));
            var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
            var seconds = Math.floor((distance % (1000 * 60)) / 1000);

            // Output the result in an element with id="demo"
            $("#castVoteViewModel_endDate").val(days + "d " + hours + "h " + minutes + "m " + seconds + "s ");
            days = "";
            hours = "";
            minutes = "";
            seconds = "";

            // If the count down is over, write some text 
            if (distance < 0) {
                clearInterval(timerFunction);
                $("#castVoteViewModel_endDate").val("EXPIRED");
            }
        }, 1000);


    }

    function validate() {
        if (distance <= 0) {
            showWarningToast();
            return false;
        }
        return true;
    }

    function showWarningToast() {
        

        toastr.options = {
            "closeButton": false,
            "debug": false,
            "newestOnTop": false,
            "progressBar": false,
            "positionClass": "toast-top-center",
            "preventDuplicates": false,
            "onclick": null,
            "showDuration": "300",
            "hideDuration": "1000",
            "timeOut": "5000",
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
        }
        toastr["info"]("The election time has expired");
    }
</script>